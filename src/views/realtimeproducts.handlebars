<div class="linea-horizontal"></div>

<div class="menu-container">
    <div class="logo">
        <a href="/">
            <img src="/img/2.png" alt="Logo de la empresa">
        </a>
    </div>
    <div class="menu">
        {{> menu}}
    </div>
</div>

<div class="userBienvenida">
    {{#if user}}
    <p>Bienvenido, {{user.first_name}}!</p>
    <p>Rol: {{user.role}}</p>
    {{/if}}
</div>

<h1>Productos en tiempo real</h1>

<div id="product-list">
    {{#if productos.length}}
    {{#each productos}}
    <div class="product-card" data-id="{{this._id}}">
        <h3>{{this.title}}</h3>
        <img src="{{this.img}}" alt="{{this.title}}" class="product-image">
        <p>Precio: ${{this.price}}</p>
        <p>Stock: {{this.stock}}</p>
        <p>Creado por: {{this.owner}}</p>
        {{#if (or (eq ../user.role 'admin') (and (eq ../user.role 'premium') (eq this.owner ../user.email)))}}
            <button onclick="editProduct('{{this._id}}')">Editar</button>
            <button onclick="deleteProduct('{{this._id}}')">Eliminar</button>
        {{/if}}
    </div>
    {{/each}}
    {{else}}
    <p>No hay productos disponibles.</p>
    {{/if}}
</div>

<div class="pagination">
    {{#if pagination.hasPrevPage}}
    <a href="/realtimeproducts?page=1&limit={{limit}}">Primera</a>
    <a href="/realtimeproducts?page={{pagination.prevPage}}&limit={{limit}}">Anterior</a>
    {{else}}
    <span class="disabled">Primera</span>
    <span class="disabled">Anterior</span>
    {{/if}}

    <span>Página {{pagination.page}} de {{pagination.totalPages}}</span>

    {{#if pagination.hasNextPage}}
    <a href="/realtimeproducts?page={{pagination.nextPage}}&limit={{limit}}">Siguiente</a>
    <a href="/realtimeproducts?page={{pagination.totalPages}}&limit={{limit}}">Última</a>
    {{else}}
    <span class="disabled">Siguiente</span>
    <span class="disabled">Última</span>
    {{/if}}
</div>

<div class="page-info"></div>

{{#if (or (eq user.role 'admin') (eq user.role 'premium'))}}
<div class="formulario">
    <h2 id="form-title">Agregar nuevo producto</h2>
    <form id="product-form">
        <input type="hidden" id="product-id">
        <input type="text" id="title" placeholder="Titulo" required>
        <input type="text" id="description" placeholder="Descripcion" required>
        <input type="number" id="price" placeholder="Precio" required>
        <input type="text" id="img" placeholder="URL de la imagen">
        <input type="text" id="code" placeholder="Código" required>
        <input type="number" id="stock" placeholder="Stock" required>
        <input type="text" id="category" placeholder="Categoria" required>
        <select id="status">
            <option value="true">Activo</option>
            <option value="false">Inactivo</option>
        </select>
        <button type="submit" id="submit-btn">Agregar</button>
        <button type="button" id="cancel-btn" style="display: none;">Cancelar</button>
    </form>
</div>
{{/if}}

<script src="/socket.io/socket.io.js"></script>
<script>
    const socket = io();
    const productList = document.getElementById('product-list');
    const productForm = document.getElementById('product-form');
    const formTitle = document.getElementById('form-title');
    const submitBtn = document.getElementById('submit-btn');
    const cancelBtn = document.getElementById('cancel-btn');
    let editingProductId = null;

    socket.on('connect', () => {
        console.log('Conectado al servidor');
        const params = getUrlParams();
        socket.emit('getProducts', params);
    });

    socket.on('products', (result) => {
        console.log('Productos recibidos:', result);
        updateProductList(result.payload);
        updatePagination(result);
    });

    socket.on('productAdded', (newProduct) => {
        alert(`Producto agregado correctamente`);
        refreshProductList();
    });

    socket.on('productUpdated', () => {
        alert('Producto actualizado correctamente');
        refreshProductList();
    });

    socket.on('productDeleted', () => {
        alert('Producto eliminado correctamente');
        refreshProductList();
    });

    function refreshProductList() {
        const params = getUrlParams();
        socket.emit('getProducts', params);
    }

    function getUrlParams() {
        const params = new URLSearchParams(window.location.search);
        return {
            page: params.get('page') || 1,
            limit: params.get('limit') || 10,
            sort: params.get('sort') || '',
            query: params.get('query') || ''
        };
    }

    function updateProductList(products) {
        productList.innerHTML = '';
        if (products && products.length > 0) {
            products.forEach(product => {
                const item = document.createElement('div');
                item.className = 'product-card';
                item.innerHTML = `
                <h3>${product.title}</h3>
                <img src="${product.img}" alt="${product.title}" class="product-image">
                <p>Precio: $${product.price}</p>
                <p>Stock: ${product.stock}</p>
                <p>Creado por: ${product.owner || 'Desconocido'}</p>
                ${canEditDelete(product) ? `
                    <button onclick="editProduct('${product._id}')">Editar</button>
                    <button onclick="deleteProduct('${product._id}')">Eliminar</button>
                ` : ''}
            `;
                productList.appendChild(item);
            });
        } else {
            productList.innerHTML = '<p>No hay productos disponibles.</p>';
        }
    }

    function updatePagination(result) {
        const paginationDiv = document.querySelector('.pagination');
        const pageInfoDiv = document.querySelector('.page-info');
        const params = getUrlParams();

        paginationDiv.innerHTML = `
            ${result.hasPrevPage ? `
                <a href="/realtimeproducts?page=1&limit=${params.limit}">Primera</a>
                <a href="/realtimeproducts?page=${result.prevPage}&limit=${params.limit}">Anterior</a>
            ` : `
                <span class="disabled">Primera</span>
                <span class="disabled">Anterior</span>
            `}

            <span>Página ${result.page} de ${result.totalPages}</span>

            ${result.hasNextPage ? `
                <a href="/realtimeproducts?page=${result.nextPage}&limit=${params.limit}">Siguiente</a>
                <a href="/realtimeproducts?page=${result.totalPages}&limit=${params.limit}">Última</a>
            ` : `
                <span class="disabled">Siguiente</span>
                <span class="disabled">Última</span>
            `}
        `;
    }

    function canEditDelete(product) {
        const userRole = '{{user.role}}';
        const userEmail = '{{user.email}}';
        return userRole === 'admin' || (userRole === 'premium' && product.owner === userEmail);
    }

    function fillForm(product) {
        console.log('Llenando formulario con:', product);
        editingProductId = product._id;
        document.getElementById('product-id').value = product._id;
        document.getElementById('title').value = product.title;
        document.getElementById('description').value = product.description;
        document.getElementById('price').value = product.price;
        document.getElementById('img').value = product.img;
        document.getElementById('code').value = product.code;
        document.getElementById('stock').value = product.stock;
        document.getElementById('category').value = product.category;
        document.getElementById('status').value = product.status.toString();

        formTitle.textContent = 'Editar producto';
        submitBtn.textContent = 'Actualizar';
        cancelBtn.style.display = 'inline-block';
    }

    cancelBtn.addEventListener('click', () => {
        resetForm();
    });

    function resetForm() {
        editingProductId = null;
        productForm.reset();
        formTitle.textContent = 'Agregar nuevo producto';
        submitBtn.textContent = 'Agregar';
        cancelBtn.style.display = 'none';
    }

    productForm.addEventListener('submit', (e) => {
        e.preventDefault();
        const productData = {
            title: document.getElementById('title').value,
            description: document.getElementById('description').value,
            price: document.getElementById('price').value,
            img: document.getElementById('img').value,
            code: document.getElementById('code').value,
            stock: document.getElementById('stock').value,
            category: document.getElementById('category').value,
            status: document.getElementById('status').value === 'true',
        };

        if (editingProductId) {
            socket.emit('updateProduct', { id: editingProductId, ...productData });
        } else {
            socket.emit('addProduct', productData);
        }

        resetForm();
    });

    function deleteProduct(productId) {
        if (confirm('¿Estás seguro de que quieres eliminar este producto?')) {
            socket.emit('deleteProduct', productId);
        }
    }

    function editProduct(productId) {
        console.log('Editando producto:', productId);
        socket.emit('getProductDetails', productId);
    }

    socket.on('productDetails', (product) => {
        console.log('Detalles del producto recibidos:', product);
        fillForm(product);
    });
</script>

<link rel="stylesheet" href="/css/styles.css">